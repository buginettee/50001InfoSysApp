package com.example.app50001;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;

import android.os.Build;
import android.os.Bundle;
import android.provider.ContactsContract;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import java.time.LocalDate;
import java.util.Date;
import java.util.HashMap;

public class UserAddGuestsFragment extends Fragment {

        private DatabaseReference dbreference;
        private FirebaseAuth dbauth;

        @RequiresApi(api = Build.VERSION_CODES.O)
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);

            //calling instances of auth and reference
            dbauth = FirebaseAuth.getInstance();
            dbreference = FirebaseDatabase.getInstance().getReference();


            //if you want to add a complete profile with all attributes available (users)
            FirebaseUser currentuser = dbauth.getCurrentUser();
            String currentUID = currentuser.getUid();

            DatabaseReference userRef = dbreference.child("Profiles").child(currentUID);

            String email = currentuser.getEmail();

            HashMap<String, Object> adminOf = new HashMap<>();
            adminOf.put("Box32","Address of Box32");

            HashMap<String, Object> guestOf = new HashMap<>();
            guestOf.put("Box32","Address of Box32");

            HashMap<String, Object> deliveryOf = new HashMap<>();
            deliveryOf.put("Box32","Address of Box32");

            HashMap<String, Object> boxAccessed = new HashMap<>();
            boxAccessed.put("Box10","Address of Box10");

            HashMap<String, Object> userHistoryOf = new HashMap<>();
            userHistoryOf.put("YYYY-MM-DD",boxAccessed);

            HashMap<String, Object> deliveryHistoryOf = new HashMap<>();
            deliveryHistoryOf.put("04-08-2019", boxAccessed);

            userRef.setValue( new Profiles("displayName",
                    email,
                    "Address",
                    "Additional Information for Delivery",
                    "Delivery ID if any",
                    "Company Name if any",
                    adminOf,
                    guestOf,
                    deliveryOf,
                    userHistoryOf,
                    deliveryHistoryOf));

            HashMap<String, Object> newAccess = new HashMap<>();
            newAccess.put("new Box", "new Address");

            String date = java.time.LocalDate.now().toString();

            userRef.child("AdminOf").updateChildren(newAccess);

            userRef.child("GuestOf").updateChildren(newAccess);

            userRef.child("DeliveryOf").updateChildren(newAccess);

            userRef.child("AccessHistoryOfProfile").child(date).updateChildren(newAccess);

            userRef.child("DeliveryHistoryOfProfile").child(date).updateChildren(newAccess);






            //if you want to add a new box

            dbauth = FirebaseAuth.getInstance();
            dbreference = FirebaseDatabase.getInstance().getReference();


            DatabaseReference boxRef = dbreference.child("Boxes");

            String BoxNo = "Box ID";

            HashMap<String, Object> AdminAccess = new HashMap<>();
            AdminAccess.put("DisplayName", "UID generated by FireBase");

            HashMap<String, Object> GuestAccess = new HashMap<>();
            GuestAccess.put("DisplayName", "UID generated by FireBase");

            HashMap<String, Object> DeliveryAccess = new HashMap<>();
            DeliveryAccess.put("DUID", "UID generated by FireBase");

            boxRef.child(BoxNo).setValue( new Boxes(AdminAccess,
                    GuestAccess,
                    DeliveryAccess,
                    true,
                    false,
                    false));


            HashMap<String, Object> NewAccess = new HashMap<>();
            NewAccess.put("DisplayName", "New UID");

            HashMap<String, Object> NewDeliveryAccess = new HashMap<>();
            NewDeliveryAccess.put("DUID", "New UID");


            boxRef.child(BoxNo).child("AdminAccess").updateChildren(NewAccess);

            boxRef.child(BoxNo).child("GuestAccess").updateChildren(NewAccess);

            boxRef.child(BoxNo).child("DeliveryAccess").updateChildren(NewDeliveryAccess);


        }




    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {

        return inflater.inflate(R.layout.fragment_user_add_guests, null);
    }
}